#!/bin/sh

# Title:         Opinionated GPG Keymanager
# Description:   Securely manage a GPG masterkey with subkeys
# Author:        Tim Kettler <tim.kettler@rethinc.de>
# Date:          2023-10-12

set -eu
VERSION="1.0.0"
SCRIPT_NAME=$(basename "$0")

# Keep readlinkf function
readlinkf() {
    [ "${1:-}" ] || return 1
    max_symlinks=40
    CDPATH='' # to avoid changing to an unexpected directory

    target=$1
    [ -e "${target%/}" ] || target=${1%"${1##*[!/]}"} # trim trailing slashes
    [ -d "${target:-/}" ] && target="$target/"

    cd -P . 2>/dev/null || return 1
    while [ "$max_symlinks" -ge 0 ] && max_symlinks=$((max_symlinks - 1)); do
        if [ ! "$target" = "${target%/*}" ]; then
            case $target in
            /*) cd -P "${target%/*}/" 2>/dev/null || break ;;
            *) cd -P "./${target%/*}" 2>/dev/null || break ;;
            esac
            target=${target##*/}
        fi

        if [ ! -L "$target" ]; then
            target="${PWD%/}${target:+/}${target}"
            printf '%s\n' "${target:-/}"
            return 0
        fi
        link=$(ls -dl -- "$target" 2>/dev/null) || break
        target=${link#*" $target -> "}
    done
    return 1
}

self=$(readlinkf "$0")
script_dir=${self%/*}

# Set variables
CONTAINER_NAME="keyring.img"
CONTAINER_PATH="$script_dir/$CONTAINER_NAME"
MOUNT_PATH="/tmp/keymanager-keyring"

# Import files
# shellcheck disable=SC1091
{
    . "${script_dir}/lib/getoptions.sh"
    . "${script_dir}/lib/main_definition.sh"
    . "${script_dir}/lib/utils.sh"
    . "${script_dir}/lib/addkey_definition.sh"
    . "${script_dir}/lib/exportkey_definition.sh"
    . "${script_dir}/lib/init_definition.sh"
    . "${script_dir}/lib/listkeys_definition.sh"
    . "${script_dir}/lib/setexpire_definition.sh"
    . "${script_dir}/lib/shell_helpers.sh"
    . "${script_dir}/lib/keymanager_helpers.sh"
}

# Autoelevate
if [ $(id -u) != 0 ]; then
    yellowprint 'Running as normal user, elevating...'
    sudo -p 'Please enter the root password: ' "$0" "$@"
    exit $?
fi

# Keep it. You need this for main parser.
eval "$(getoptions parser_definition parse "$0") exit 1"
parse "$@"
eval "set -- $REST"

# Check dependencies of your script
 check_cmd cryptsetup
 check_cmd gpg

# Add more commands.
# Don't forget to add your command in lib/main_definition.sh
if [ $# -gt 0 ]; then
    cmd=$1
    shift
    case $cmd in
    init)
        eval "$(getoptions parser_definition_init parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/src/init.sh"
        fn_init "$@"
        ;;
    addkey)
        eval "$(getoptions parser_definition_addkey parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/src/addkey.sh"
        fn_addkey "$@"
        ;;
    --) ;; # no subcommand, arguments only
    listkeys)
        eval "$(getoptions parser_definition_listkeys parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/src/listkeys.sh"
        fn_listkeys "$@"
        ;;
    exportkey)
        eval "$(getoptions parser_definition_exportkey parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/src/exportkey.sh"
        fn_exportkey "$@"
        ;;
    setexpire)
        eval "$(getoptions parser_definition_setexpire parse "$0")"
        parse "$@"
        eval "set -- $REST"
        # shellcheck disable=SC1091
        . "${script_dir}/src/setexpire.sh"
        fn_setexpire "$@"
        ;;
    --) ;; # no subcommand, arguments only
    esac
fi
